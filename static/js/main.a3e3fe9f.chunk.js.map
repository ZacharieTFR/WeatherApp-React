{"version":3,"sources":["i18n.js","actions/index.js","components/AddCityDialog.js","components/DeleteCityDialog.js","components/ForecastDisplay.js","components/WeatherCard.js","components/WeatherApp.js","App.js","serviceWorker.js","reducers/index.js","helpers/localStorage.js","store/store.js","index.js"],"names":["i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","interpolation","escapeValue","backend","loadPath","API_KEY","process","API_ENDPOINT","addCity","city","type","payload","fetchWeatherBegin","fetchForecastBegin","fetchCityWeatherSuccess","weather","cityName","fetchCityForecastSuccess","forecast","fetchFailure","error","addCityAndGetWeather","dispatch","getState","cities","find","city_name","toUpperCase","fetchCityWeather","fetch","language","then","handleErrors","res","json","data","country","catch","message","fetchForecast","country_code","response","ok","console","log","Error","statusText","useStyles","makeStyles","root","backgroundColor","display","alignItems","paddingLeft","connect","state","props","t","useTranslation","classes","_React$useState","React","useState","_React$useState2","Object","slicedToArray","open","setOpen","_React$useState3","_React$useState4","openSnackBar","setOpenSnackBar","handleClose","react_default","a","createElement","Fragment","Tooltip","title","aria-label","Fab","color","onClick","Add_default","Dialog","onClose","aria-labelledby","DialogTitle","id","onSubmit","event","preventDefault","target","value","DialogContent","TextField","autoFocus","required","margin","inputProps","pattern","label","fullWidth","DialogActions","Button","Snackbar","ContentProps","Error_default","className","IconButton","key","Close_default","size","deleteBtn","float","deleteCity","Clear_default","fontSize","aria-describedby","style","textTransform","DialogContentText","API_ICONS_URL","marginTop","flexWrap","justifyContent","overflow","progress","marginLeft","img","height","width","typoBlock","gridList","transform","forecastDayDisplay","minWidth","lightGrey","loadingForecast","CircularProgress","day_names","returnObjects","GridList","cols","map","Typography","variant","Date","ts","getDay","src","icon","alt","concat","app_max_temp","app_min_temp","card","WeatherCard","weatherData","dateTime","last_ob_time","date","toLocaleDateString","time","toLocaleTimeString","windSpeed","wind_spd","windDirection","wind_cdir_full","iconUrl","Card","CardContent","Grid","container","spacing","item","xs","components_DeleteCityDialog","align","temp","description","sunrise","sunset","rh","components_ForecastDisplay","WeatherApp","that","this","navigator","geolocation","getCurrentPosition","position","fetchCityAndWeatherFromCoords","coords","warn","getUserCoordsAndWeather","getCitiesWeathers","newLang","changeLanguage","clearError","_this","react","fallback","AppBar","Toolbar","flexGrow","Select","onChange","e","handleChangeLang","IconComponent","LangIcon","MenuItem","handleRefresh","Refresh_default","components_AddCityDialog","index","Boolean","handleCloseSnackError","Component","compose","withTranslation","withStyles","loadingWeather","forEach","latitude","longitude","App","components_WeatherApp","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","arguments","length","undefined","action","objectSpread","toConsumableArray","filter","slice","saveState","serializedState","JSON","stringify","localStorage","setItem","_unused","getItem","parse","err","loadState","initialData","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","initialState","createStore","rootReducer","applyMiddleware","thunk","subscribe","configureStore","ReactDOM","render","react_redux_es","src_App","document","getElementById","URL","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3e3fe9f.chunk.js","sourcesContent":["import i18n from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nconst fallbackLng = ['en'];\r\nconst availablelanguages = ['en', 'fr'];\r\n\r\ni18n\r\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\r\n\r\n  .use(LanguageDetector) // detect user language\r\n\r\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\r\n\r\n  .init({\r\n    fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\r\n    debug: false,\r\n    whitelist: availablelanguages,\r\n\r\n    interpolation: {\r\n      escapeValue: false\r\n    },\r\n    backend: {\r\n      loadPath: '/WeatherApp-React/locales/{{lng}}/translation.json'\r\n    }\r\n  });\r\n\r\nexport default i18n;\r\n","import i18n from '../i18n';\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\r\n\r\nexport const addCity = city => ({\r\n  type: 'ADD_CITY',\r\n  payload: { city }\r\n});\r\n\r\nexport const addCityError = error => ({\r\n  type: 'ADD_CITY_ERROR',\r\n  payload: { error }\r\n});\r\n\r\nexport const deleteCity = city => ({\r\n  type: 'DELETE_CITY',\r\n  payload: { city }\r\n});\r\n\r\nexport const fetchWeatherBegin = () => ({\r\n  type: 'FETCH_WEATHER_BEGIN'\r\n});\r\nexport const fetchForecastBegin = () => ({\r\n  type: 'FETCH_FORECAST_BEGIN'\r\n});\r\n\r\nexport const fetchCityWeatherSuccess = (weather, cityName) => ({\r\n  type: 'FETCH_CITY_WEATHER_SUCCESS',\r\n  payload: { weather, cityName }\r\n});\r\nexport const fetchCityForecastSuccess = (city, forecast) => ({\r\n  type: 'FETCH_CITY_FORECAST_SUCCESS',\r\n  payload: { city: city, forecast: forecast }\r\n});\r\n\r\nexport const fetchFailure = error => ({\r\n  type: 'FETCH_FAILURE',\r\n  payload: { error }\r\n});\r\n\r\nexport const clearError = () => ({\r\n  type: 'CLEAR_ERROR'\r\n});\r\nexport function addCityAndGetWeather(cityName) {\r\n  return (dispatch, getState) => {\r\n    const { cities } = getState();\r\n\r\n    const alreadyExist = cities.find(\r\n      city => city.city_name.toUpperCase() === cityName.toUpperCase()\r\n    );\r\n\r\n    if (!alreadyExist) {\r\n      dispatch(addCity(cityName));\r\n      dispatch(fetchCityWeather(cityName));\r\n    }\r\n  };\r\n}\r\n\r\nexport function getCitiesWeathers() {\r\n  return (dispatch, getState) => {\r\n    const { cities } = getState();\r\n    cities.forEach(city => {\r\n      dispatch(fetchCityWeather(city.city_name));\r\n    });\r\n  };\r\n}\r\n\r\nexport function fetchCityAndWeatherFromCoords(coords) {\r\n  return dispatch => {\r\n    dispatch(fetchWeatherBegin());\r\n    fetch(\r\n      API_ENDPOINT +\r\n        'current/' +\r\n        '?lat=' +\r\n        coords.latitude +\r\n        '&lon=' +\r\n        coords.longitude +\r\n        '&key=' +\r\n        API_KEY\r\n    )\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        const city = json.data[0];\r\n        dispatch(addCityAndGetWeather(city.city_name));\r\n        return city;\r\n      })\r\n      .catch(error => dispatch(fetchFailure(error.message)));\r\n  };\r\n}\r\n\r\nexport function fetchCityWeather(cityName) {\r\n  return dispatch => {\r\n    dispatch(fetchWeatherBegin());\r\n    fetch(\r\n      API_ENDPOINT +\r\n        'current/' +\r\n        '?lang=' +\r\n        i18n.language +\r\n        '&city=' +\r\n        cityName +\r\n        '&key=' +\r\n        API_KEY\r\n    )\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        const city = json.data[0];\r\n        // It's mandatory to keep cityName for corner case where translation is involved.\r\n        // i.e if Pékin is added, the API answer with Beijing as city name.\r\n        // To be coherent only the API name is kept\r\n        dispatch(fetchCityWeatherSuccess(city, cityName));\r\n        dispatch(fetchForecast(city.city_name, city.country_code));\r\n        return city;\r\n      })\r\n      .catch(error => dispatch(fetchFailure(error.message)));\r\n  };\r\n}\r\n\r\nexport function fetchForecast(city, country) {\r\n  return dispatch => {\r\n    dispatch(fetchForecastBegin);\r\n    fetch(\r\n      API_ENDPOINT +\r\n        'forecast/daily' +\r\n        '?lang=' +\r\n        i18n.language +\r\n        '&city=' +\r\n        city +\r\n        '&country=' +\r\n        country +\r\n        '&key=' +\r\n        API_KEY\r\n    )\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        dispatch(fetchCityForecastSuccess(city, json.data));\r\n        return json.data;\r\n      })\r\n      .catch(error => dispatch(fetchFailure(error.message)));\r\n  };\r\n}\r\n\r\n// Handle HTTP errors since fetch won't.\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    console.log('fail');\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n","import React from 'react';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { addCityAndGetWeather } from '../actions';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: '#D32F2F',\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  message: {\r\n    paddingLeft: '12px',\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  }\r\n});\r\n\r\nfunction AddCityDialog(props) {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [openSnackBar, setOpenSnackBar] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleOpenSnackBarError() {\r\n    setOpenSnackBar(false);\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const cityName = event.target.cityName.value;\r\n    const alreadyExist = props.cities.find(\r\n      city => city.city_name.toUpperCase() === cityName.toUpperCase()\r\n    );\r\n\r\n    if (alreadyExist) {\r\n      setOpenSnackBar(true);\r\n      return;\r\n    }\r\n    props.addCity(cityName);\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Tooltip title={t('add_city')} aria-label={t('add_city')}>\r\n        <Fab color=\"secondary\" onClick={handleClickOpen}>\r\n          <AddIcon />\r\n        </Fab>\r\n      </Tooltip>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">{t('add_city')}</DialogTitle>\r\n        <form id=\"addCityForm\" onSubmit={handleSubmit}>\r\n          <DialogContent>\r\n            <TextField\r\n              autoFocus\r\n              required\r\n              margin=\"dense\"\r\n              id=\"cityName\"\r\n              inputProps={{ pattern: '^([A-zÀ-ÖØ-öø-ÿ-])*$' }}\r\n              label={t('city_name')}\r\n              type=\"text\"\r\n              fullWidth\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button type=\"submit\" color=\"primary\">\r\n              {t('add')}\r\n            </Button>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              {t('cancel')}\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n        <Snackbar\r\n          open={openSnackBar}\r\n          ContentProps={{\r\n            classes: {\r\n              root: classes.root,\r\n              message: classes.message\r\n            }\r\n          }}\r\n          message={\r\n            <>\r\n              <ErrorIcon />\r\n              <span className={classes.message}>{t('alreadyExist')}</span>\r\n              <IconButton\r\n                key=\"close\"\r\n                aria-label=\"Close\"\r\n                color=\"inherit\"\r\n                onClick={handleOpenSnackBarError}\r\n              >\r\n                <CloseIcon size=\"small\" />\r\n              </IconButton>\r\n            </>\r\n          }\r\n        />\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addCity: cityName => {\r\n      dispatch(addCityAndGetWeather(cityName));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cities: state.cities\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AddCityDialog);\r\n","import React from 'react';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport { deleteCity } from '../actions';\r\n\r\nconst useStyles = makeStyles({\r\n  deleteBtn: {\r\n    float: 'right'\r\n  }\r\n});\r\n\r\nfunction DeleteCityDialog(props) {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleDelete(event) {\r\n    props.deleteCity(props.city);\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Tooltip title={t('delete_city')} aria-label={t('delete_city')}>\r\n        <IconButton\r\n          aria-label={t('delete')}\r\n          className={classes.deleteBtn}\r\n          onClick={handleClickOpen}\r\n        >\r\n          <ClearIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <div>\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle\r\n            id=\"alert-dialog-title\"\r\n            style={{ textTransform: 'capitalize' }}\r\n          >\r\n            {t('delete')} {props.city} ?\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {t('confirm_delete')}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleDelete} color=\"primary\">\r\n              {t('delete')}\r\n            </Button>\r\n            <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n              {t('cancel')}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    deleteCity: city => {\r\n      dispatch(deleteCity(city));\r\n    }\r\n  };\r\n};\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cities: state.cities\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DeleteCityDialog);\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst API_ICONS_URL = process.env.REACT_APP_API_ICONS_URL;\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginTop: '1.5em',\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden'\r\n  },\r\n  progress: {\r\n    marginLeft: '50%'\r\n  },\r\n  img: {\r\n    height: 64,\r\n    width: 64,\r\n    display: 'block'\r\n  },\r\n  typoBlock: {\r\n    display: 'block'\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n    width: '100%'\r\n  },\r\n  forecastDayDisplay: {\r\n    minWidth: '75px',\r\n    height: '120px !important'\r\n  },\r\n  lightGrey: {\r\n    color: '#8c8c8c'\r\n  }\r\n});\r\n\r\nfunction ForecastDisplay(props) {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n\r\n  if (!props.city.forecast) {\r\n    return <CircularProgress className={classes.progress} />;\r\n  }\r\n\r\n  const day_names = t('day_names', { returnObjects: true });\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList className={classes.gridList} cols={2.5}>\r\n        {props.city.forecast.map((forecast, id) => (\r\n          <center className={classes.forecastDayDisplay} key={id}>\r\n            <Typography className={classes.typoBlock} variant=\"body1\">\r\n              {day_names[new Date(forecast.ts * 1000).getDay()]}\r\n            </Typography>\r\n            <img\r\n              className={classes.img}\r\n              src={API_ICONS_URL + forecast.weather.icon + '.png'}\r\n              height=\"64\"\r\n              width=\"64\"\r\n              alt=\"weather icon\"\r\n            />\r\n            <Typography\r\n              className={`${classes.typoBlock} ${classes.lightGrey}`}\r\n              variant=\"caption\"\r\n            >\r\n              {forecast.app_max_temp}° {forecast.app_min_temp}°\r\n            </Typography>\r\n          </center>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loadingForecast: state.loadingForecast\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ForecastDisplay);\r\n","import React from 'react';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\nimport DeleteCityDialog from './DeleteCityDialog';\r\nimport ForecastDisplay from './ForecastDisplay';\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    margin: '12px 0'\r\n  },\r\n  lightGrey: {\r\n    color: '#8c8c8c'\r\n  },\r\n  deleteBtn: {\r\n    float: 'right'\r\n  }\r\n});\r\n\r\nconst API_ICONS_URL = process.env.REACT_APP_API_ICONS_URL;\r\n\r\nexport default function WeatherCard(props) {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n\r\n  if (!props || !props.city.weather) {\r\n    return null;\r\n  }\r\n\r\n  const weatherData = props.city;\r\n  const dateTime = new Date(weatherData.last_ob_time);\r\n  const date = dateTime.toLocaleDateString();\r\n  const time = dateTime.toLocaleTimeString();\r\n  const windSpeed = weatherData.wind_spd;\r\n  const windDirection = weatherData.wind_cdir_full;\r\n  const iconUrl = API_ICONS_URL + weatherData.weather.icon + '.png';\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <DeleteCityDialog city={weatherData.city_name} />\r\n            <Typography variant=\"h5\">\r\n              {weatherData.city_name}, {weatherData.country_code}\r\n            </Typography>\r\n            <Typography className={classes.lightGrey} variant=\"subtitle2\">\r\n              {date}, {time}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <img align=\"left\" src={iconUrl} alt=\"weather icon\" />\r\n            <Typography variant=\"h2\">{weatherData.temp}°</Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              {weatherData.weather.description}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <Typography variant=\"subtitle1\">\r\n              <span className={classes.lightGrey}>{t('sunrise')}: </span>\r\n              {weatherData.sunrise}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              <span className={classes.lightGrey}>{t('sunset')}: </span>\r\n              {weatherData.sunset}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              <span className={classes.lightGrey}>{t('wind')}: </span>\r\n              {windSpeed} m/s, {windDirection}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              <span className={classes.lightGrey}>{t('humidity')}: </span>\r\n              {weatherData.rh} %\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <ForecastDisplay city={props.city} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { Suspense } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport LangIcon from '@material-ui/icons/Language';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Select from '@material-ui/core/Select';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { withTranslation } from 'react-i18next';\r\nimport compose from 'recompose/compose';\r\nimport i18n from '../i18n';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  getCitiesWeathers,\r\n  fetchCityAndWeatherFromCoords,\r\n  clearError\r\n} from '../actions/index';\r\n\r\nimport AddCityDialog from './AddCityDialog';\r\nimport WeatherCard from './WeatherCard';\r\n\r\nconst styles = {\r\n  root: {\r\n    backgroundColor: '#D32F2F',\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  message: {\r\n    paddingLeft: '12px',\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  }\r\n};\r\nclass WeatherApp extends React.Component {\r\n  getUserCoordsAndWeather() {\r\n    let that = this;\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        function(position) {\r\n          that.props.fetchCityAndWeatherFromCoords(position.coords);\r\n        },\r\n        function(error) {\r\n          // if any error occurs (user decline,timeout etc..)\r\n          console.warn(error.message);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserCoordsAndWeather();\r\n    this.props.getCitiesWeathers();\r\n  }\r\n\r\n  handleRefresh() {\r\n    this.props.getCitiesWeathers();\r\n  }\r\n\r\n  handleChangeLang(event) {\r\n    const newLang = event.target.value;\r\n    i18n.changeLanguage(newLang);\r\n  }\r\n\r\n  handleCloseSnackError() {\r\n    this.props.clearError();\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const classes = this.props.classes;\r\n    return (\r\n      <React.Fragment>\r\n        <Suspense fallback={<div>Loading</div>}>\r\n          <AppBar position=\"fixed\" className=\"header\">\r\n            <Toolbar>\r\n              <Typography variant=\"h6\" color=\"inherit\" style={{ flexGrow: 1 }}>\r\n                Weather App\r\n              </Typography>\r\n\r\n              <Select\r\n                onChange={e => {\r\n                  this.handleChangeLang(e);\r\n                }}\r\n                IconComponent={LangIcon}\r\n                value={i18n.language}\r\n              >\r\n                <MenuItem value=\"fr\">Français</MenuItem>\r\n                <MenuItem value=\"en\">English</MenuItem>\r\n              </Select>\r\n              <Tooltip title={t('refresh')} aria-label={t('refresh')}>\r\n                <IconButton\r\n                  aria-label={t('refresh')}\r\n                  onClick={() => {\r\n                    this.handleRefresh();\r\n                  }}\r\n                >\r\n                  <RefreshIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <AddCityDialog />\r\n            </Toolbar>\r\n          </AppBar>\r\n          <div style={{ marginTop: '4.5em' }}>\r\n            {this.props.cities.map((city, index) => (\r\n              <WeatherCard key={index} city={city} />\r\n            ))}\r\n          </div>\r\n          <Snackbar\r\n            open={Boolean(this.props.error)}\r\n            ContentProps={{\r\n              classes: {\r\n                root: classes.root,\r\n                message: classes.message\r\n              }\r\n            }}\r\n            message={\r\n              <React.Fragment>\r\n                <ErrorIcon />\r\n                <span className={classes.message}>{t(this.props.error)}</span>\r\n                <IconButton\r\n                  key=\"close\"\r\n                  aria-label=\"Close\"\r\n                  color=\"inherit\"\r\n                  onClick={() => {\r\n                    this.handleCloseSnackError();\r\n                  }}\r\n                >\r\n                  <CloseIcon size=\"small\" />\r\n                </IconButton>\r\n              </React.Fragment>\r\n            }\r\n          />\r\n        </Suspense>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getCitiesWeathers: () => {\r\n      dispatch(getCitiesWeathers());\r\n    },\r\n    fetchCityAndWeatherFromCoords: coords => {\r\n      dispatch(fetchCityAndWeatherFromCoords(coords));\r\n    },\r\n    clearError: () => {\r\n      dispatch(clearError());\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cities: state.cities,\r\n    loadingWeather: state.loadingWeather,\r\n    loadingForecast: state.loadingForecast,\r\n    error: state.error\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  withTranslation(),\r\n  withStyles(styles),\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )\r\n)(WeatherApp);\r\n","import React, { Suspense } from 'react';\n\nimport WeatherApp from './components/WeatherApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<div>Loading</div>}>\n        <WeatherApp />\n      </Suspense>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const cities = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_CITY':\r\n      return {\r\n        ...state,\r\n        cities: [...state.cities, { city_name: action.payload.city }]\r\n      };\r\n\r\n    case 'DELETE_CITY':\r\n      return {\r\n        ...state,\r\n        cities: state.cities.filter(\r\n          city => city.city_name !== action.payload.city\r\n        )\r\n      };\r\n\r\n    // Useful to show a loading indicator (futur feature)\r\n    case 'FETCH_WEATHER_BEGIN':\r\n      return {\r\n        ...state,\r\n        loadingWeather: true,\r\n        error: null\r\n      };\r\n\r\n    case 'FETCH_FORECAST_BEGIN':\r\n      return {\r\n        ...state,\r\n        loadingForecast: true,\r\n        error: null\r\n      };\r\n\r\n    case 'FETCH_CITY_WEATHER_SUCCESS':\r\n      return {\r\n        ...state,\r\n        loadingWeather: false,\r\n        cities: state.cities.map((item, index) => {\r\n          if (\r\n            item.city_name === action.payload.weather.city_name ||\r\n            item.city_name === action.payload.cityName\r\n          ) {\r\n            return action.payload.weather;\r\n          }\r\n          return item;\r\n        })\r\n      };\r\n\r\n    case 'FETCH_CITY_FORECAST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        loadingForecast: false,\r\n        cities: state.cities.map((item, index) => {\r\n          if (item.city_name !== action.payload.city) {\r\n            return item;\r\n          }\r\n          return { ...item, forecast: action.payload.forecast.slice(1, 8) };\r\n        })\r\n      };\r\n    case 'FETCH_FAILURE':\r\n      return {\r\n        ...state,\r\n        loadingWeather: false,\r\n        loadingForecast: false,\r\n        error: action.payload.error\r\n      };\r\n    case 'CLEAR_ERROR':\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default cities;\r\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = state => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('state', serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from '../reducers';\r\nimport thunk from 'redux-thunk';\r\nimport { saveState, loadState } from '../helpers/localStorage';\r\nconst state = loadState();\r\n\r\nconst initialData = {\r\n  cities: state ? state.cities : []\r\n};\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore(initialState = initialData) {\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeEnhancer(applyMiddleware(thunk))\r\n  );\r\n\r\n  store.subscribe(() => {\r\n    saveState({\r\n      cities: store.getState().cities\r\n    });\r\n  });\r\n  return store;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/store';\n\nconst store = configureStore();\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}