{"version":3,"sources":["components/AddCityDialog.js","components/DeleteCityDialog.js","i18n.js","components/ForecastDisplay.js","components/WeatherCard.js","components/WeatherApp.js","App.js","serviceWorker.js","index.js"],"names":["AddCityDialog","props","t","useTranslation","_React$useState","React","useState","_React$useState2","Object","slicedToArray","open","setOpen","handleClose","react_default","a","createElement","Tooltip","title","aria-label","Fab","color","onClick","Add_default","Dialog","onClose","aria-labelledby","DialogTitle","id","onSubmit","event","city","target","cityName","value","onCityAdd","preventDefault","DialogContent","TextField","autoFocus","required","margin","label","type","fullWidth","DialogActions","Button","useStyles","makeStyles","deleteBtn","float","DeleteCityDialog","classes","IconButton","className","Clear_default","fontSize","aria-describedby","style","textTransform","DialogContentText","onCityDelete","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","interpolation","escapeValue","backend","loadPath","ForecastDisplay","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","forecast","_this2","fetch","API_ENDPOINT","language","country","then","res","json","result","setState","data","slice","error","fetchForecast","day_names","returnObjects","root","GridList","gridList","cols","map","forecastDayDisplay","key","Typography","typoBlock","variant","Date","ts","getDay","img","src","process","weather","icon","height","width","alt","concat","lightGrey","app_max_temp","app_min_temp","Component","withStyles","theme","marginTop","display","flexWrap","justifyContent","overflow","transform","minWidth","withTranslation","card","API_ICONS_URL","WeatherCard","weatherData","city_name","country_code","dateTime","last_ob_time","date","toLocaleDateString","time","toLocaleTimeString","windSpeed","wind_spd","windDirection","wind_cdir_full","iconUrl","Card","CardContent","Grid","container","spacing","item","xs","align","temp","description","sunrise","sunset","rh","components_ForecastDisplay","WeatherApp","weathers","cities","Storage","localStorage_cities","JSON","parse","localStorage","getItem","setItem","stringify","that","navigator","geolocation","getCurrentPosition","position","fetchCoordsWeather","coords","console","warn","message","handleCityAdd","latitude","longitude","cityTrad","toConsumableArray","index","indexOf","_this3","forEach","replaceCityTrad","push","getCitiesSaved","getUserCoords","find","cty","saveCitiesToLocalStorage","fetchCitiesWeathers","cityToDelete","filter","newLang","changeLanguage","_this4","react","fallback","AppBar","Toolbar","flexGrow","Select","onChange","e","handleChangeLang","IconComponent","LangIcon","MenuItem","handleRefresh","Refresh_default","handleCityDelete","App","components_WeatherApp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App","document","getElementById","URL","href","origin","addEventListener","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3d3bb0d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport default function AddCityDialog(props) {\r\n  const { t } = useTranslation();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    const city = event.target.cityName.value;\r\n    props.onCityAdd(city);\r\n    event.preventDefault();\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Tooltip title={t('add_city')} aria-label={t('add_city')}>\r\n        <Fab color=\"secondary\" onClick={handleClickOpen}>\r\n          <AddIcon />\r\n        </Fab>\r\n      </Tooltip>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">{t('add_city')}</DialogTitle>\r\n        <form id=\"addCityForm\" onSubmit={handleSubmit}>\r\n          <DialogContent>\r\n            <TextField\r\n              autoFocus\r\n              required\r\n              margin=\"dense\"\r\n              id=\"cityName\"\r\n              label={t('city_name')}\r\n              type=\"text\"\r\n              fullWidth\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button type=\"submit\" color=\"primary\">\r\n              {t('add')}\r\n            </Button>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              {t('cancel')}\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst useStyles = makeStyles({\r\n  deleteBtn: {\r\n    float: 'right'\r\n  }\r\n});\r\n\r\nexport default function DeleteCityDialog(props) {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClickOpen() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleDelete(event) {\r\n    props.onCityDelete(props.city);\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Tooltip title={t('delete_city')} aria-label={t('delete_city')}>\r\n        <IconButton\r\n          aria-label={t('delete')}\r\n          className={classes.deleteBtn}\r\n          onClick={handleClickOpen}\r\n        >\r\n          <ClearIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n      <div>\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle\r\n            id=\"alert-dialog-title\"\r\n            style={{ textTransform: 'capitalize' }}\r\n          >\r\n            {t('delete')} {props.city} ?\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {t('confirm_delete')}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleDelete} color=\"primary\">\r\n              {t('delete')}\r\n            </Button>\r\n            <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n              {t('cancel')}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import i18n from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nconst fallbackLng = ['en'];\r\nconst availablelanguages = ['en', 'fr'];\r\n\r\ni18n\r\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\r\n\r\n  .use(LanguageDetector) // detect user language\r\n\r\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\r\n\r\n  .init({\r\n    fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\r\n    debug: false,\r\n    whitelist: availablelanguages,\r\n\r\n    interpolation: {\r\n      escapeValue: false\r\n    },\r\n    backend: {\r\n      loadPath: '../WeatherApp-React/locales/{{lng}}/translation.json'\r\n    }\r\n  });\r\n\r\nexport default i18n;\r\n","import { withStyles } from '@material-ui/styles';\r\nimport React from 'react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport i18n from '../i18n';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GridList from '@material-ui/core/GridList';\r\n\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\r\nconst API_ICONS_URL = process.env.REACT_APP_API_ICONS_URL;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    marginTop: '1.5em',\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden'\r\n  },\r\n  img: {\r\n    height: 64,\r\n    width: 64,\r\n    display: 'block'\r\n  },\r\n  typoBlock: {\r\n    display: 'block'\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n    width: '100%'\r\n  },\r\n  forecastDayDisplay: {\r\n    minWidth: '75px',\r\n    height: '120px !important'\r\n  },\r\n  lightGrey: {\r\n    color: '#8c8c8c'\r\n  }\r\n});\r\n\r\nclass ForecastDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      forecast: []\r\n    };\r\n  }\r\n  fetchForecast() {\r\n    fetch(\r\n      API_ENDPOINT +\r\n        'forecast/daily' +\r\n        '?lang=' +\r\n        i18n.language +\r\n        '&city=' +\r\n        this.props.city +\r\n        '&country=' +\r\n        this.props.country +\r\n        '&key=' +\r\n        API_KEY\r\n    )\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          this.setState({ forecast: result.data.slice(1, 7) });\r\n        },\r\n        error => {\r\n          this.setState({\r\n            error\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchForecast(this.props.city);\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const classes = this.props.classes;\r\n    const day_names = t('day_names', { returnObjects: true });\r\n    return (\r\n      <div className={classes.root}>\r\n        <GridList className={classes.gridList} cols={2.5}>\r\n          {this.state.forecast.map((forecast, id) => (\r\n            <center className={classes.forecastDayDisplay} key={id}>\r\n              <Typography className={classes.typoBlock} variant=\"body1\">\r\n                {day_names[new Date(forecast.ts * 1000).getDay()]}\r\n              </Typography>\r\n              <img\r\n                className={classes.img}\r\n                src={API_ICONS_URL + forecast.weather.icon + '.png'}\r\n                height=\"64\"\r\n                width=\"64\"\r\n                alt=\"weather icon\"\r\n              />\r\n              <Typography\r\n                className={`${classes.typoBlock} ${classes.lightGrey}`}\r\n                variant=\"caption\"\r\n              >\r\n                {forecast.app_max_temp}° {forecast.app_min_temp}°\r\n              </Typography>\r\n            </center>\r\n          ))}\r\n        </GridList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(withTranslation()(ForecastDisplay));\r\n","import React from 'react';\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteCityDialog from './DeleteCityDialog';\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ForecastDisplay from './ForecastDisplay';\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    margin: '12px 0'\r\n  },\r\n  lightGrey: {\r\n    color: '#8c8c8c'\r\n  },\r\n  deleteBtn: {\r\n    float: 'right'\r\n  }\r\n});\r\n\r\nconst API_ICONS_URL = process.env.REACT_APP_API_ICONS_URL;\r\n\r\nexport default function WeatherCard(props) {\r\n  const { t } = useTranslation();\r\n  const classes = useStyles();\r\n\r\n  if (!props) {\r\n    return;\r\n  }\r\n\r\n  function handleCityDelete(city) {\r\n    props.onCityDelete(city);\r\n  }\r\n\r\n  const weatherData = props.data[0];\r\n  const cityName = weatherData.city_name;\r\n  const country = weatherData.country_code;\r\n  const dateTime = new Date(weatherData.last_ob_time);\r\n  const date = dateTime.toLocaleDateString();\r\n  const time = dateTime.toLocaleTimeString();\r\n  const windSpeed = weatherData.wind_spd;\r\n  const windDirection = weatherData.wind_cdir_full;\r\n  const iconUrl = API_ICONS_URL + weatherData.weather.icon + '.png';\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <DeleteCityDialog\r\n              onCityDelete={() => handleCityDelete(cityName)}\r\n              city={weatherData.city_name}\r\n            />\r\n            <Typography variant=\"h5\">\r\n              {weatherData.city_name}, {weatherData.country_code}\r\n            </Typography>\r\n            <Typography className={classes.lightGrey} variant=\"subtitle2\">\r\n              {date}, {time}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <img align=\"left\" src={iconUrl} alt=\"weather icon\" />\r\n            <Typography variant=\"h2\">{weatherData.temp}°</Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              {weatherData.weather.description}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <Typography variant=\"subtitle1\">\r\n              <span className={classes.lightGrey}>{t('sunrise')}: </span>\r\n              {weatherData.sunrise}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              <span className={classes.lightGrey}>{t('sunset')}: </span>\r\n              {weatherData.sunset}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              <span className={classes.lightGrey}>{t('wind')}: </span>\r\n              {windSpeed} m/s, {windDirection}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              <span className={classes.lightGrey}>{t('humidity')}: </span>\r\n              {weatherData.rh} %\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <ForecastDisplay city={cityName} country={country} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { Suspense } from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport LangIcon from '@material-ui/icons/Language';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { withTranslation } from 'react-i18next';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Select from '@material-ui/core/Select';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport AddCityDialog from './AddCityDialog';\r\nimport WeatherCard from './WeatherCard';\r\nimport i18n from '../i18n';\r\n\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\r\n\r\nclass WeatherApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      weathers: [],\r\n      cities: []\r\n    };\r\n  }\r\n  getCitiesSaved() {\r\n    // Check for Web Storage support.\r\n    if (typeof Storage == 'undefined') {\r\n      return;\r\n    }\r\n    const localStorage_cities = JSON.parse(localStorage.getItem('cities'));\r\n    if (localStorage_cities) {\r\n      this.setState({ cities: localStorage_cities });\r\n    }\r\n  }\r\n\r\n  saveCitiesToLocalStorage(cities) {\r\n    if (typeof Storage !== 'undefined') {\r\n      localStorage.setItem('cities', JSON.stringify(cities));\r\n    }\r\n  }\r\n\r\n  getUserCoords() {\r\n    let that = this;\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        function(position) {\r\n          that.fetchCoordsWeather(position.coords);\r\n        },\r\n        function(error) {\r\n          // Set Paris as default city if any error occurs (user decline,timeout etc..)\r\n          console.warn(error.message);\r\n          that.handleCityAdd('Paris');\r\n        }\r\n      );\r\n    } else {\r\n      // browser doesn't support geoloc\r\n      this.handleCityAdd('Paris');\r\n    }\r\n  }\r\n\r\n  fetchCoordsWeather(coords) {\r\n    fetch(\r\n      API_ENDPOINT +\r\n        'current/' +\r\n        '?lat=' +\r\n        coords.latitude +\r\n        '&lon=' +\r\n        coords.longitude +\r\n        '&key=' +\r\n        API_KEY\r\n    )\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          this.handleCityAdd(result.data[0].city_name);\r\n        },\r\n        error => {\r\n          this.setState({\r\n            error\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  // Cities with several names depending on the language can create issues.\r\n  // i.e if we add Pékin the weather API translate it to Beijing.\r\n  // To be coherent only one is kept.\r\n  replaceCityTrad(city, cityTrad) {\r\n    if (city !== cityTrad) {\r\n      const cities = [...this.state.cities];\r\n      const index = cities.indexOf(city);\r\n      cities[index] = cityTrad;\r\n      this.setState({ cities: cities });\r\n    }\r\n  }\r\n\r\n  fetchCitiesWeathers(cities) {\r\n    let weathers = [];\r\n    cities.forEach(city => {\r\n      fetch(\r\n        API_ENDPOINT +\r\n          'current/' +\r\n          '?lang=' +\r\n          i18n.language +\r\n          '&city=' +\r\n          city +\r\n          '&key=' +\r\n          API_KEY\r\n      )\r\n        .then(res => res.json())\r\n        .then(\r\n          result => {\r\n            this.replaceCityTrad(city, result.data[0].city_name);\r\n            weathers.push(result.data);\r\n            this.setState({\r\n              weathers: weathers\r\n            });\r\n          },\r\n          error => {\r\n            this.setState({\r\n              error\r\n            });\r\n          }\r\n        );\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCitiesSaved();\r\n    this.getUserCoords();\r\n  }\r\n\r\n  handleCityAdd(city) {\r\n    let cities = this.state.cities;\r\n    const alreadyExist = cities.find(cty => cty === city);\r\n    if (!alreadyExist) {\r\n      cities.push(city);\r\n      this.saveCitiesToLocalStorage(cities);\r\n      this.setState({ cities: cities });\r\n    }\r\n    this.fetchCitiesWeathers(cities);\r\n  }\r\n\r\n  handleCityDelete(cityToDelete) {\r\n    const cities = this.state.cities.filter(city => city !== cityToDelete);\r\n    const weathers = this.state.weathers.filter(\r\n      city => city[0].city_name !== cityToDelete\r\n    );\r\n    this.saveCitiesToLocalStorage(cities);\r\n    this.setState({ cities: cities, weathers: weathers });\r\n  }\r\n\r\n  handleRefresh() {\r\n    this.fetchCitiesWeathers(this.state.cities);\r\n  }\r\n\r\n  handleChangeLang(event) {\r\n    const newLang = event.target.value;\r\n    i18n.changeLanguage(newLang);\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Suspense fallback={<div>Loading</div>}>\r\n          <AppBar position=\"fixed\" className=\"header\">\r\n            <Toolbar>\r\n              <Typography variant=\"h6\" color=\"inherit\" style={{ flexGrow: 1 }}>\r\n                Weather App\r\n              </Typography>\r\n              <Select\r\n                onChange={e => {\r\n                  this.handleChangeLang(e);\r\n                }}\r\n                IconComponent={LangIcon}\r\n                value={i18n.language}\r\n              >\r\n                <MenuItem value=\"fr\">Français</MenuItem>\r\n                <MenuItem value=\"en\">English</MenuItem>\r\n              </Select>\r\n              <Tooltip title={t('refresh')} aria-label={t('refresh')}>\r\n                <IconButton\r\n                  aria-label={t('refresh')}\r\n                  onClick={() => {\r\n                    this.handleRefresh();\r\n                  }}\r\n                >\r\n                  <RefreshIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <AddCityDialog onCityAdd={city => this.handleCityAdd(city)} />\r\n            </Toolbar>\r\n          </AppBar>\r\n          <div style={{ marginTop: '4.5em' }}>\r\n            {this.state.weathers.map((weather, index) => (\r\n              <WeatherCard\r\n                key={index}\r\n                data={weather}\r\n                onCityDelete={city => this.handleCityDelete(city)}\r\n              />\r\n            ))}\r\n          </div>\r\n        </Suspense>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withTranslation()(WeatherApp);\r\n","import React, { Suspense } from 'react';\n\nimport WeatherApp from './components/WeatherApp';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Suspense fallback={<div>Loading</div>}>\n        <WeatherApp />\n      </Suspense>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}